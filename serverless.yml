service: serverless-game
# app and org for use with dashboard.serverless.com
app: serverless-game
org: silarsis


custom:
  defaultRegion: ap-southeast-1
  thingTableName: 'thing-table-${self:provider.stage}'
  locationTableName: 'location-table-${self:provider.stage}'
  contentsTableName: 'contents-table-${self:provider.stage}'
  locationsTableName: 'locations-table-${self:provider.stage}'
  thingTopic: 'thing-topic-${self:provider.stage}'
  MessageDelayerName: 'message-delayer-${self:provider.stage}'

provider:
  name: aws
  runtime: python3.8
  region: ${opt:region, self:custom.defaultRegion}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ThingDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["LocationDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ContentsDynamoDBTable", "Arn" ] }
  environment:
    THING_TABLE: ${self:custom.thingTableName}
    LOCATION_TABLE: ${self:custom.locationTableName}
    CONTENTS_TABLE: ${self:custom.contentsTableName}
    LOCATIONS_TABLE: ${self:custom.locationsTableName}
    THING_TOPIC_ARN: !Ref ThingTopic
    MESSAGE_DELAYER_ARN: !GetAtt ["MessageDelayer", "Arn"]

functions:
  thing:
    handler: aspects/thing.handler
    VpcId:
      Ref:
        Fn::ImportValue: VpcId
    package:
      exclude:
        - ./**
      include:
        - aspects/**
    events:
      - sns:
          arn: !Ref ThingTopic
          topicName: ${self:custom.thingTopic}
          filterPolicy:
            aspect:
              - thing

  location:
    handler: aspects/location.handler
    VpcId:
      Ref:
        Fn::ImportValue: VpcId
    package:
      exclude:
        - ./**
      include:
        - aspects/**
    events:
      - sns:
          arn: !Ref ThingTopic
          topicName: ${self:custom.thingTopic}
          filterPolicy:
            aspect:
              - location

    landCreator:
      handler: aspects/landCreator.handler
      VpcId:
        Ref:
          Fn::ImportValue: VpcId
      package:
        exclude:
          - ./**
        include:
          - aspects/**
      events:
        - sns:
            arn: !Ref ThingTopic
            topicName: ${self:custom.thingTopic}
            filterPolicy:
              aspect:
                - landCreator
resources:
  Resources:
    ThingTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.thingTopic}
    StepFunctionsServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: !Join ["", ["/", !Ref "AWS::StackName", "/"]]
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowStepFunctionsServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service: "states.${opt:region, self:custom.defaultRegion}.amazonaws.com"
        Policies:
          - PolicyName: "PublishToSNSTopic"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sns:Publish"
                  Resource:
                    - !Ref ThingTopic
    MessageDelayer:
      Type: "AWS::StepFunctions::StateMachine"
      Properties:
        StateMachineName: ${self:custom.MessageDelayerName}
        RoleArn: !GetAtt StepFunctionsServiceRole.Arn
        # Replace "SecondsPath" with "TimestampPath" for scheduling
        DefinitionString:
          Fn::Sub:
            - |
              {
                "StartAt": "Delay",
                "Comment": "Publish to SNS with delay",
                "States": {
                  "Delay": {
                    "Type": "Wait",
                    "SecondsPath": "$.delay_seconds",
                    "Next": "Publish to SNS"
                  },
                  "Publish to SNS": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::sns:publish",
                    "Parameters": {
                      "TopicArn": "arn:aws:sns:${opt:region, self:custom.defaultRegion}::${self:custom.thingTopic}",
                      "Message.$": "$.data"
                    },
                    "End": true
                  }
                }
              }
            - SNSTopic: !Ref ThingTopic

    ThingDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.thingTableName}
    LocationDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.locationTableName}
    ContentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
          -
            AttributeName: contains
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
          -
            AttributeName: contains
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.contentsTableName}