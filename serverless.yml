service: serverless-game
# app and org for use with dashboard.serverless.com
app: serverless-game
org: silarsis

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
custom:
  pythonRequirements:
    pythonBin: python3
  defaultRegion: ap-southeast-1
  tables:
    thingName: 'thing-table-${self:provider.stage}'
    locationName: 'location-table-${self:provider.stage}'
    landName: 'land-table-${self:provider.stage}'
  topics:
    thingName: 'thing-topic-${self:provider.stage}'
  MessageDelayerName: 'message-delayer-${self:provider.stage}'

provider:
  name: aws
  runtime: python3.8
  memorySize: 128
  tracing:
    lambda: true
  region: ${opt:region, self:custom.defaultRegion}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ThingDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["LocationDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["LandDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource:
        - !Ref MessageDelayer
  environment:
    THING_TABLE: ${self:custom.tables.thingName}
    LOCATION_TABLE: ${self:custom.tables.locationName}
    LAND_TABLE: ${self:custom.tables.landName}
    THING_TOPIC_ARN: !Ref ThingTopic
    MESSAGE_DELAYER_ARN: !Ref MessageDelayer
    DD_TRACE_AGENT_URL: 'https://ingest.lightstep.com:443'
    DD_TRACE_GLOBAL_TAGS: "lightstep.service_name:serverless-game,lightstep.access_token:${param:lightstep_access_token}"

functions:
  eventlogger:
    handler: aspects/eventLogger.handler
    VpcId:
      Ref:
        Fn::ImportValue: VpcId
    package:
      exclude:
        - ./**
      include:
        - aspects/**
    events:
      - sns:
          arn: !Ref ThingTopic

  location:
    handler: aspects/location.handler
    VpcId:
      Ref:
        Fn::ImportValue: VpcId
    package:
      exclude:
        - ./**
      include:
        - aspects/**
    events:
      - sns:
          arn: !Ref ThingTopic
          filterPolicy:
            aspect:
              - Location

  land:
    handler: aspects/land.handler
    VpcId:
      Ref:
        Fn::ImportValue: VpcId
    package:
      exclude:
        - ./**
      include:
        - aspects/**
    events:
      - sns:
          arn: !Ref ThingTopic
          filterPolicy:
            aspect:
              - Land

  landCreator:
    handler: aspects/landCreator.handler
    VpcId:
      Ref:
        Fn::ImportValue: VpcId
    package:
      exclude:
        - ./**
      include:
        - aspects/**
    events:
      - sns:
          arn: !Ref ThingTopic
          filterPolicy:
            aspect:
              - LandCreator

resources:
  Resources:
    ThingTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.topics.thingName}
    StepFunctionsServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: "/#{AWS::StackName}/"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowStepFunctionsServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service: "states.#{AWS::Region}.amazonaws.com"
        Policies:
          - PolicyName: "PublishToSNSTopic"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sns:Publish"
                  Resource:
                    - !Ref ThingTopic
    MessageDelayer:
      Type: "AWS::StepFunctions::StateMachine"
      Properties:
        StateMachineName: ${self:custom.MessageDelayerName}
        RoleArn: !GetAtt StepFunctionsServiceRole.Arn
        # Replace "SecondsPath" with "TimestampPath" for scheduling
        DefinitionString: |
          {
            "StartAt": "Delay",
            "Comment": "Publish to SNS with delay",
            "States": {
              "Delay": {
                "Type": "Wait",
                "SecondsPath": "$.delay_seconds",
                "Next": "Publish to SNS"
              },
              "Publish to SNS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "TopicArn": "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.topics.thingName}",
                  "Message.$": "$.data",
                  "MessageAttributes": {
                    "aspect": {
                      "DataType": "String",
                      "StringValue.$": "$.data.aspect"
                    },
                    "action": {
                      "DataType": "String",
                      "StringValue.$": "$.data.action"
                    },
                    "uuid": {
                      "DataType": "String",
                      "StringValue.$": "$.data.uuid"
                    }
                  }
                },
                "End": true
              }
            }
          }

    ThingDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.thingName}

    LocationDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
          -
            AttributeName: location
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: "contents"
            KeySchema:
              -
                AttributeName: location
                KeyType: HASH
              -
                AttributeName: uuid
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.locationName}

    LandDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
          -
            AttributeName: location
            AttributeType: S
          -
            AttributeName: coordinates
            AttributeType: L
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: "contents"
            KeySchema:
              -
                AttributeName: location
                KeyType: HASH
              -
                AttributeName: uuid
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          -
            IndexName: "cartesian"
            KeySchema:
              -
                AttributeName: coordinates
                KeyType: HASH
              -
                AttributeName: uuid
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.locationName}