service: serverless-game
# app and org for use with dashboard.serverless.com
app: serverless-game
org: silarsis


custom:
  thingTableName: 'thing-table-${self:provider.stage}'
  locationTableName: 'location-table-${self:provider.stage}'
  contentsTableName: 'contents-table-${self:provider.stage}'
  LocationsTableName: 'locations-table-${self:provider.stage}'
  thingTopic: 'thing-topic-${self:provider.stage}'

provider:
  name: aws
  runtime: python3.8
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ThingDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["LocationDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ContentsDynamoDBTable", "Arn" ] }
  environment:
    THING_TABLE: ${self:custom.thingTableName}
    LOCATION_TABLE: ${self:custom.locationTableName}
    CONTENTS_TABLE: ${self:custom.contentsTableName}
    LOCATIONS_TABLE: ${self:custom.locationsTableName}
    THING_TOPIC: ${self:custom.thingTopic}

functions:
  thing:
    handler: aspects/thing.handler
    VpcId:
      Ref:
        Fn::ImportValue: VpcId
    package:
      exclude:
        - ./**
      include:
        - aspects/**
    events:
      - sns:
          arn: !Ref ThingTopic
          topicName: ThingTopic
  location:
    handler: aspects/location.handler
    VpcId:
      Ref:
        Fn::ImportValue: VpcId
    package:
      exclude:
        - ./**
      include:
        - aspects/**
    events:
      - sns:
          arn: !Ref ThingTopic
          topicName: ThingTopic
          filterPolicy:
            aspect:
              - location

resources:
  Resources:
    ThingTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.thingTopic}
    ThingDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.thingTableName}
    LocationDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.locationTableName}
    ContentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
          -
            AttributeName: contains
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
          -
            AttributeName: contains
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.contentsTableName}